{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/final-project-w2m/Wave2Me-DCI-FinalProject/client/src/components/Alphabet/Alphabet.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport A from '../../assets/ASLalphabet/A.png';\nimport B from '../../assets/ASLalphabet/B.png';\nimport C from '../../assets/ASLalphabet/C.png';\nimport D from '../../assets/ASLalphabet/D.png';\nimport E from '../../assets/ASLalphabet/E.png';\nimport F from '../../assets/ASLalphabet/F.png';\nimport G from '../../assets/ASLalphabet/G.png';\nimport H from '../../assets/ASLalphabet/H.png';\nimport I from '../../assets/ASLalphabet/I.png';\nimport J from '../../assets/ASLalphabet/J.png';\nimport K from '../../assets/ASLalphabet/K.png';\nimport L from '../../assets/ASLalphabet/L.png';\nimport M from '../../assets/ASLalphabet/M.png';\nimport N from '../../assets/ASLalphabet/N.png';\nimport O from '../../assets/ASLalphabet/O.png';\nimport P from '../../assets/ASLalphabet/P.png';\nimport Q from '../../assets/ASLalphabet/Q.png';\nimport R from '../../assets/ASLalphabet/R.png';\nimport S from '../../assets/ASLalphabet/S.png';\nimport T from '../../assets/ASLalphabet/T.png';\nimport U from '../../assets/ASLalphabet/U.png';\nimport V from '../../assets/ASLalphabet/V.png';\nimport W from '../../assets/ASLalphabet/W.png';\nimport X from '../../assets/ASLalphabet/X.png';\nimport Y from '../../assets/ASLalphabet/Y.png';\nimport Z from '../../assets/ASLalphabet/Z.png';\nimport SPACE from '../../assets/ASLalphabet/empty.png';\nimport './Alphabet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Alphabet = () => {\n  _s();\n\n  const alphabet = {\n    A: A,\n    B: B,\n    C: C,\n    D: D,\n    E: E,\n    F: F,\n    G: G,\n    H: H,\n    I: I,\n    J: J,\n    K: K,\n    L: L,\n    M: M,\n    N: N,\n    O: O,\n    P: P,\n    Q: Q,\n    R: R,\n    S: S,\n    T: T,\n    U: U,\n    V: V,\n    W: W,\n    X: X,\n    Y: Y,\n    Z: Z,\n    SPACE: SPACE\n  };\n  const startSentence = [/*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"L\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 29\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"i\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 44\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"s\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 59\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"t\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 74\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"e\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 89\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"n\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 104\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      flexBasis: '3%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 29\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"t\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 68\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"o\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 83\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      flexBasis: '3%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 98\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"m\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 29\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"y\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 44\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      flexBasis: '3%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 59\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"h\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 98\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"a\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 113\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"n\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 128\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"d\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 29\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"s\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 44\n  }, this)];\n  const [inputValue, setInputValue] = useState(startSentence);\n  const [ASLalphabet, setASLalphabet] = useState(null);\n  const [letter, setLetter] = useState(alphabet['SPACE']);\n  const [displayLetter, setDisplayLetter] = useState(null);\n  const [displayPlayBtn, setDisplayPlayBtn] = useState(true);\n  const [displayModal, setDisplayModal] = useState(false);\n\n  const write = e => {\n    if (e.target.value[e.target.value.length - 1] !== ' ' && !isNaN(+e.target.value[e.target.value.length - 1])) {\n      e.target.value = e.target.value.slice(0, -1);\n    }\n\n    const inputText = e.target.value.split('');\n    const letterSpans = inputText.map(letter => {\n      if (letter === ' ') return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          flexBasis: '3%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 60\n      }, this);else if (!letter.match(/[a-z]/i)) return /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 64\n      }, this);else return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: letter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 71\n      }, this);\n    });\n    setInputValue(letterSpans); //if(e.target.value && e.target.value[e.target.value.length-1].match(/[a-z]/i)) \n    //setLetter(alphabet[e.target.value[e.target.value.length-1].toUpperCase()]);\n  };\n\n  const play = e => {\n    setLetter(alphabet['SPACE']);\n    setDisplayLetter(null);\n    setDisplayModal(true);\n    setDisplayPlayBtn(false);\n    const letters = inputValue.map(obj => {\n      var _obj$props;\n\n      if (obj !== null && obj !== void 0 && (_obj$props = obj.props) !== null && _obj$props !== void 0 && _obj$props.children) return obj.props.children;else return 'SPACE';\n    });\n    let i = -1;\n    const playAlphabet = setInterval(() => {\n      if (i < letters.length - 1) {\n        var _inputValue$i, _inputValue$i$props;\n\n        ((_inputValue$i = inputValue[++i]) === null || _inputValue$i === void 0 ? void 0 : (_inputValue$i$props = _inputValue$i.props) === null || _inputValue$i$props === void 0 ? void 0 : _inputValue$i$props.children) && setLetter(alphabet[letters[i].toUpperCase()]);\n        setDisplayLetter(letters[i] !== 'SPACE' ? letters[i].toUpperCase() : '-');\n      } else {\n        clearInterval(playAlphabet);\n        setDisplayPlayBtn(true);\n      }\n    }, 1000);\n  };\n\n  const closeModal = e => {\n    setDisplayModal(false);\n  };\n\n  useEffect(() => {\n    const inputText = inputValue.map(span => {\n      if (span.props.children) return span.props.children;else return '-';\n    });\n    const inputImages = inputText.map(letter => {\n      if (letter && letter.match(/[a-z]/i)) {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: alphabet[letter.toUpperCase()],\n          alt: `ASL letter ${letter}`,\n          width: \"10%\",\n          height: \"13%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 61\n        }, this);\n      } else if (letter && letter === '-') return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: alphabet.SPACE,\n        alt: \"Empty space character\",\n        width: \"10%\",\n        height: \"13%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 63\n      }, this);\n    });\n    setASLalphabet(inputImages);\n    /* inputValue[0]?.props?.children && \n    inputValue[0]?.props?.children.match(/[a-z]/i) &&\n    setLetter(alphabet[inputValue[0].props.children.toUpperCase()]); */\n  }, [inputValue]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"alphabet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'black',\n        fontSize: '3rem'\n      },\n      children: \"Insert a phrase to generate ASL alphabet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Insert a phrase to generate ASL alphabet\",\n      title: \"Max 40 characters - only LETTERS from English alphabet will be translated\",\n      onChange: write,\n      maxLength: \"40\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"translate-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"asl-alphabet-generator\",\n        className: \"asl-translate\",\n        children: ASLalphabet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"asl-text\",\n        className: \"asl-translate\",\n        children: inputValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), displayPlayBtn && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: play,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 51\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 28\n    }, this), displayModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"play-asl-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"close-asl-modal\",\n        onClick: closeModal,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: letter,\n        alt: `ASL letter ${letter}`,\n        width: '35%',\n        height: '55%'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: 'black',\n          fontSize: '7rem',\n          flexBasis: '7rem'\n        },\n        children: displayLetter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this), displayPlayBtn && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: play,\n        children: \"Play again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Alphabet, \"JbYu0MrN6WBWsYt2L60YRhJfQJ0=\");\n\n_c = Alphabet;\nexport default Alphabet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Alphabet\");","map":{"version":3,"names":["useState","useEffect","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","SPACE","Alphabet","alphabet","startSentence","flexBasis","inputValue","setInputValue","ASLalphabet","setASLalphabet","letter","setLetter","displayLetter","setDisplayLetter","displayPlayBtn","setDisplayPlayBtn","displayModal","setDisplayModal","write","e","target","value","length","isNaN","slice","inputText","split","letterSpans","map","match","play","letters","obj","props","children","i","playAlphabet","setInterval","toUpperCase","clearInterval","closeModal","span","inputImages","color","fontSize"],"sources":["/home/user/Desktop/final-project-w2m/Wave2Me-DCI-FinalProject/client/src/components/Alphabet/Alphabet.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport A from '../../assets/ASLalphabet/A.png';\nimport B from '../../assets/ASLalphabet/B.png';\nimport C from '../../assets/ASLalphabet/C.png';\nimport D from '../../assets/ASLalphabet/D.png';\nimport E from '../../assets/ASLalphabet/E.png';\nimport F from '../../assets/ASLalphabet/F.png';\nimport G from '../../assets/ASLalphabet/G.png';\nimport H from '../../assets/ASLalphabet/H.png';\nimport I from '../../assets/ASLalphabet/I.png';\nimport J from '../../assets/ASLalphabet/J.png';\nimport K from '../../assets/ASLalphabet/K.png';\nimport L from '../../assets/ASLalphabet/L.png';\nimport M from '../../assets/ASLalphabet/M.png';\nimport N from '../../assets/ASLalphabet/N.png';\nimport O from '../../assets/ASLalphabet/O.png';\nimport P from '../../assets/ASLalphabet/P.png';\nimport Q from '../../assets/ASLalphabet/Q.png';\nimport R from '../../assets/ASLalphabet/R.png';\nimport S from '../../assets/ASLalphabet/S.png';\nimport T from '../../assets/ASLalphabet/T.png';\nimport U from '../../assets/ASLalphabet/U.png';\nimport V from '../../assets/ASLalphabet/V.png';\nimport W from '../../assets/ASLalphabet/W.png';\nimport X from '../../assets/ASLalphabet/X.png';\nimport Y from '../../assets/ASLalphabet/Y.png';\nimport Z from '../../assets/ASLalphabet/Z.png';\nimport SPACE from '../../assets/ASLalphabet/empty.png';\nimport './Alphabet.css'\n\nconst Alphabet = () => {\n\n    const alphabet = {\n        A: A, B: B, C: C, D: D, E: E, F: F, G: G, H: H, I: I, J: J, K: K, L: L, M: M, \n        N: N, O: O, P: P, Q: Q, R: R, S: S, T: T, U: U, V: V, W: W, X: X, Y: Y, Z: Z,\n        SPACE: SPACE\n    }\n\n    const startSentence = [ <span>L</span>,<span>i</span>,<span>s</span>,<span>t</span>,<span>e</span>,<span>n</span>,\n                            <span style={{flexBasis:'3%'}}></span>,<span>t</span>,<span>o</span>,<span style={{flexBasis:'3%'}}></span>,\n                            <span>m</span>,<span>y</span>,<span style={{flexBasis:'3%'}}></span>,<span>h</span>,<span>a</span>,<span>n</span>,\n                            <span>d</span>,<span>s</span>,]\n\n    const [inputValue, setInputValue] = useState(startSentence);\n    const [ASLalphabet, setASLalphabet] = useState(null);\n    const [letter, setLetter] = useState(alphabet['SPACE']);\n    const [displayLetter, setDisplayLetter] = useState(null);\n    const [displayPlayBtn, setDisplayPlayBtn] = useState(true);\n    const [displayModal, setDisplayModal] = useState(false);\n\n    const write = (e) => { \n        if(e.target.value[e.target.value.length-1]!==' ' && !isNaN(+e.target.value[e.target.value.length-1])){\n            e.target.value=e.target.value.slice(0, -1);\n        }\n        const inputText = e.target.value.split('');\n        const letterSpans = inputText.map(letter=>{if(letter===' ')\n                                                    return <span style={{flexBasis:'3%'}}></span>\n                                                      else if(!letter.match(/[a-z]/i))\n                                                        return <span></span>\n                                                          else return <span>{letter}</span>})\n        \n        setInputValue(letterSpans);\n        //if(e.target.value && e.target.value[e.target.value.length-1].match(/[a-z]/i)) \n        //setLetter(alphabet[e.target.value[e.target.value.length-1].toUpperCase()]);\n    }\n\n    const play = (e) => {\n        setLetter(alphabet['SPACE']);\n        setDisplayLetter(null);\n        setDisplayModal(true);\n        setDisplayPlayBtn(false);\n        const letters = inputValue.map(obj=>{if(obj?.props?.children) return obj.props.children\n                                                else return 'SPACE'});\n        let i =-1;\n        const playAlphabet = setInterval(()=>{ if(i<letters.length-1){\n            inputValue[++i]?.props?.children &&\n            setLetter(alphabet[letters[i].toUpperCase()]);\n            setDisplayLetter(letters[i]!=='SPACE'?letters[i].toUpperCase():'-')}\n            else {clearInterval(playAlphabet); setDisplayPlayBtn(true)}\n        },1000);\n    }\n\n    const closeModal = (e) => {\n        setDisplayModal(false);\n    }\n\n    useEffect(()=>{\n        const inputText=inputValue.map(span=>{if(span.props.children) return span.props.children; else return '-'});\n        \n        const inputImages=inputText.map(letter=>{ if(letter && letter.match(/[a-z]/i)){\n                                                    return (<img src={alphabet[letter.toUpperCase()]} \n                                                        alt={`ASL letter ${letter}`}\n                                                        width=\"10%\"\n                                                        height=\"13%\"></img>)\n                                                     } else if(letter && letter==='-')\n                                                       return <img \n                                                                src={alphabet.SPACE} \n                                                                alt='Empty space character'\n                                                                width=\"10%\"\n                                                                height=\"13%\"></img>\n                                        })\n        setASLalphabet(inputImages);\n        /* inputValue[0]?.props?.children && \n        inputValue[0]?.props?.children.match(/[a-z]/i) &&\n        setLetter(alphabet[inputValue[0].props.children.toUpperCase()]); */\n    },[inputValue]);\n    \n\n  return (\n    <div id='alphabet-container'>\n        <p style={{color: 'black', fontSize:'3rem'}}>Insert a phrase to generate ASL alphabet</p>\n        <input \n            type=\"text\" \n            placeholder='Insert a phrase to generate ASL alphabet'\n            title='Max 40 characters - only LETTERS from English alphabet will be translated' \n            onChange={write}\n            maxLength='40'\n            autoFocus/>\n        <br />   \n        <section id='translate-section'>\n            <div id='asl-alphabet-generator' className='asl-translate'>{ASLalphabet}</div>\n            <div id='asl-text' className='asl-translate'>{inputValue}</div>\n        </section>\n\n        {displayPlayBtn && <button onClick={play}><i className=\"fa fa-play\"></i></button>}\n        \n        {displayModal &&\n        <div id='play-asl-modal'>\n            <button id='close-asl-modal' onClick={closeModal}>X</button>\n            <img src={letter} alt={`ASL letter ${letter}` } width={'35%'} height={'55%'}/>\n            <h1 style={{color: 'black', fontSize:'7rem', flexBasis:'7rem'}}>{displayLetter}</h1>\n            {displayPlayBtn && <button onClick={play}>Play again</button>}\n        </div>}\n    </div>\n  )\n}\n\nexport default Alphabet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}